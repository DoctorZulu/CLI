
CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039cc  080039cc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000049cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039d0  080039d0  000049d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  08003a30  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003a30  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f05  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001931  00000000  00000000  0000df91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ad  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206be  00000000  00000000  000105e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a292  00000000  00000000  00030ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6c77  00000000  00000000  0003af35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002278  00000000  00000000  00101bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00103e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003944 	.word	0x08003944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003944 	.word	0x08003944

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <remove_trailing_newline>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void remove_trailing_newline(char *str) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    int len = strlen(str);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	60fb      	str	r3, [r7, #12]
    while (len > 0 && (str[len - 1] == ' ' || str[len - 1] == '\r' || str[len - 1] == '\n')) {
 80005c2:	e008      	b.n	80005d6 <remove_trailing_newline+0x26>
        str[len - 1] = '\0';  // Replace trailing whitespace with null-terminator
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
        len--;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
    while (len > 0 && (str[len - 1] == ' ' || str[len - 1] == '\r' || str[len - 1] == '\n')) {
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dd14      	ble.n	8000606 <remove_trailing_newline+0x56>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3b01      	subs	r3, #1
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b20      	cmp	r3, #32
 80005e8:	d0ec      	beq.n	80005c4 <remove_trailing_newline+0x14>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0d      	cmp	r3, #13
 80005f6:	d0e5      	beq.n	80005c4 <remove_trailing_newline+0x14>
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b0a      	cmp	r3, #10
 8000604:	d0de      	beq.n	80005c4 <remove_trailing_newline+0x14>
    }
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <processCommand>:

void processCommand(char *cmd) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a0      	sub	sp, #128	@ 0x80
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    // Example: Print the received command back
	remove_trailing_newline(cmd);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffc9 	bl	80005b0 <remove_trailing_newline>
    char response[BUFFER_SIZE + 20];
    snprintf(response, sizeof(response), "Received command: %s\r\n", cmd);
 800061e:	f107 0008 	add.w	r0, r7, #8
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <processCommand+0x40>)
 8000626:	2178      	movs	r1, #120	@ 0x78
 8000628:	f002 fcd8 	bl	8002fdc <sniprintf>

    // Send response via UART
    HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fded 	bl	8000210 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	f107 0108 	add.w	r1, r7, #8
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <processCommand+0x44>)
 8000644:	f001 fcc4 	bl	8001fd0 <HAL_UART_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3780      	adds	r7, #128	@ 0x80
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0800395c 	.word	0x0800395c
 8000654:	20000078 	.word	0x20000078

08000658 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a33      	ldr	r2, [pc, #204]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d15f      	bne.n	800072a <HAL_UART_RxCpltCallback+0xd2>
        if (received_byte == '\r' || received_byte == '\n') {
 800066a:	4b33      	ldr	r3, [pc, #204]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b0d      	cmp	r3, #13
 8000670:	d003      	beq.n	800067a <HAL_UART_RxCpltCallback+0x22>
 8000672:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b0a      	cmp	r3, #10
 8000678:	d10c      	bne.n	8000694 <HAL_UART_RxCpltCallback+0x3c>
            // End of command; null-terminate the string
            buffer[buffer_index] = '\0';
 800067a:	4b30      	ldr	r3, [pc, #192]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 8000682:	2100      	movs	r1, #0
 8000684:	5499      	strb	r1, [r3, r2]

            // Process the full command (print or execute the command)
            processCommand(buffer);
 8000686:	482e      	ldr	r0, [pc, #184]	@ (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 8000688:	f7ff ffc2 	bl	8000610 <processCommand>

            // Reset the buffer for the next command
            buffer_index = 0;
 800068c:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e045      	b.n	8000720 <HAL_UART_RxCpltCallback+0xc8>
        } else if (received_byte == 0x08) {  // Backspace
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b08      	cmp	r3, #8
 800069a:	d121      	bne.n	80006e0 <HAL_UART_RxCpltCallback+0x88>
            if (buffer_index > 0) {
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d03d      	beq.n	8000720 <HAL_UART_RxCpltCallback+0xc8>
                buffer_index--;  // Decrease index to remove the last character
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b23      	ldr	r3, [pc, #140]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 80006ae:	701a      	strb	r2, [r3, #0]

                // Send backspace sequence to clear in terminal visually
                char backspace_sequence[3] = {0x08, ' ', 0x08}; // Backspace, Space, Backspace
 80006b0:	4a24      	ldr	r2, [pc, #144]	@ (8000744 <HAL_UART_RxCpltCallback+0xec>)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	4611      	mov	r1, r2
 80006ba:	8019      	strh	r1, [r3, #0]
 80006bc:	3302      	adds	r3, #2
 80006be:	0c12      	lsrs	r2, r2, #16
 80006c0:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)backspace_sequence, sizeof(backspace_sequence), HAL_MAX_DELAY);
 80006c2:	f107 010c 	add.w	r1, r7, #12
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	2203      	movs	r2, #3
 80006cc:	481e      	ldr	r0, [pc, #120]	@ (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 80006ce:	f001 fc7f 	bl	8001fd0 <HAL_UART_Transmit>

                buffer[buffer_index] = '\0';  // Null-terminate the string
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 80006da:	2100      	movs	r1, #0
 80006dc:	5499      	strb	r1, [r3, r2]
 80006de:	e01f      	b.n	8000720 <HAL_UART_RxCpltCallback+0xc8>
            }
        } else {
            // Prevent buffer overflow
            if (buffer_index < BUFFER_SIZE - 1) {  // Leave room for null terminator
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b62      	cmp	r3, #98	@ 0x62
 80006e6:	d818      	bhi.n	800071a <HAL_UART_RxCpltCallback+0xc2>
                buffer[buffer_index++] = received_byte;  // Store the byte
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	b2d1      	uxtb	r1, r2
 80006f0:	4a12      	ldr	r2, [pc, #72]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 80006f2:	7011      	strb	r1, [r2, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 80006f8:	7819      	ldrb	r1, [r3, #0]
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 80006fc:	5499      	strb	r1, [r3, r2]
                buffer[buffer_index] = '\0';  // Null-terminate the string
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_UART_RxCpltCallback+0xe8>)
 8000706:	2100      	movs	r1, #0
 8000708:	5499      	strb	r1, [r3, r2]

                // Echo the received byte back to the terminal (for user feedback)
                HAL_UART_Transmit(&huart2, (uint8_t *)&received_byte, 1, HAL_MAX_DELAY);
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	2201      	movs	r2, #1
 8000710:	4909      	ldr	r1, [pc, #36]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000714:	f001 fc5c 	bl	8001fd0 <HAL_UART_Transmit>
 8000718:	e002      	b.n	8000720 <HAL_UART_RxCpltCallback+0xc8>
            } else {
                // Handle buffer overflow (reset or error message)
                // Optionally clear the buffer
                buffer_index = 0;  // Reset buffer index
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Re-enable the UART receive interrupt to receive the next byte
        HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	4905      	ldr	r1, [pc, #20]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <HAL_UART_RxCpltCallback+0xf0>)
 8000726:	f001 fcde 	bl	80020e6 <HAL_UART_Receive_IT>
    }
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40004400 	.word	0x40004400
 8000738:	20000125 	.word	0x20000125
 800073c:	20000124 	.word	0x20000124
 8000740:	200000c0 	.word	0x200000c0
 8000744:	08003974 	.word	0x08003974
 8000748:	20000078 	.word	0x20000078

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fa42 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f810 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f8a6 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075c:	f000 f87a 	bl	8000854 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	4903      	ldr	r1, [pc, #12]	@ (8000770 <main+0x24>)
 8000764:	4803      	ldr	r0, [pc, #12]	@ (8000774 <main+0x28>)
 8000766:	f001 fcbe 	bl	80020e6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <main+0x1e>
 800076e:	bf00      	nop
 8000770:	20000125 	.word	0x20000125
 8000774:	20000078 	.word	0x20000078

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	@ 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fc5c 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <SystemClock_Config+0xd4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a29      	ldr	r2, [pc, #164]	@ (800084c <SystemClock_Config+0xd4>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b27      	ldr	r3, [pc, #156]	@ (800084c <SystemClock_Config+0xd4>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <SystemClock_Config+0xd8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c4:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <SystemClock_Config+0xd8>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <SystemClock_Config+0xd8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ec:	2310      	movs	r3, #16
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f8f4 	bl	80019f4 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000812:	f000 f8b7 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fd94 	bl	8001360 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800083e:	f000 f8a1 	bl	8000984 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f001 fb50 	bl	8001f30 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f875 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000078 	.word	0x20000078
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000934:	f000 fcfa 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_GPIO_Init+0xd8>)
 8000950:	f000 fb58 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_GPIO_Init+0xd4>)
 800096c:	f000 fb4a 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fa44 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a74 <HAL_UART_MspInit+0x94>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d133      	bne.n	8000a6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <HAL_UART_MspInit+0x98>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <HAL_UART_MspInit+0x98>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <HAL_UART_MspInit+0x98>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_UART_MspInit+0x98>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <HAL_UART_MspInit+0x98>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_UART_MspInit+0x98>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <HAL_UART_MspInit+0x9c>)
 8000a56:	f000 fad5 	bl	8001004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2026      	movs	r0, #38	@ 0x26
 8000a60:	f000 fa07 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a64:	2026      	movs	r0, #38	@ 0x26
 8000a66:	f000 fa20 	bl	8000eaa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <MemManage_Handler+0x4>

08000a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad6:	f000 f8d1 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <USART2_IRQHandler+0x10>)
 8000ae6:	f001 fb23 	bl	8002130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000078 	.word	0x20000078

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f002 fa96 	bl	8003054 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20020000 	.word	0x20020000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	20000128 	.word	0x20000128
 8000b5c:	20000278 	.word	0x20000278

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b88:	f7ff ffea 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 fa55 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fdc9 	bl	800074c <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc8:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 8000bcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd0:	20000278 	.word	0x20000278

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f92b 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f808 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fec0 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_InitTick+0x54>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_InitTick+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f943 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00e      	b.n	8000c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f90b 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <HAL_InitTick+0x5c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	2000012c 	.word	0x2000012c

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2000012c 	.word	0x2000012c

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	@ (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff3e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff31 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff feda 	bl	8000ca4 <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d008      	beq.n	8000f10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e052      	b.n	8000fb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0216 	bic.w	r2, r2, #22
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <HAL_DMA_Abort+0x62>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0208 	bic.w	r2, r2, #8
 8000f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f60:	e013      	b.n	8000f8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f62:	f7ff fe9f 	bl	8000ca4 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d90c      	bls.n	8000f8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2220      	movs	r2, #32
 8000f74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e015      	b.n	8000fb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1e4      	bne.n	8000f62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9c:	223f      	movs	r2, #63	@ 0x3f
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d004      	beq.n	8000fdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00c      	b.n	8000ff6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2205      	movs	r2, #5
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e165      	b.n	80012ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8154 	bne.w	80012e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80ae 	beq.w	80012e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <HAL_GPIO_Init+0x300>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a5c      	ldr	r2, [pc, #368]	@ (8001304 <HAL_GPIO_Init+0x300>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b5a      	ldr	r3, [pc, #360]	@ (8001304 <HAL_GPIO_Init+0x300>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a58      	ldr	r2, [pc, #352]	@ (8001308 <HAL_GPIO_Init+0x304>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	@ (800130c <HAL_GPIO_Init+0x308>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001314 <HAL_GPIO_Init+0x310>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001318 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	@ (800131c <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x20a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001320 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x206>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a49      	ldr	r2, [pc, #292]	@ (8001324 <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x202>
 8001202:	2306      	movs	r3, #6
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001206:	2307      	movs	r3, #7
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	@ (8001308 <HAL_GPIO_Init+0x304>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b3a      	ldr	r3, [pc, #232]	@ (8001328 <HAL_GPIO_Init+0x324>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a31      	ldr	r2, [pc, #196]	@ (8001328 <HAL_GPIO_Init+0x324>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <HAL_GPIO_Init+0x324>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a26      	ldr	r2, [pc, #152]	@ (8001328 <HAL_GPIO_Init+0x324>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <HAL_GPIO_Init+0x324>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae96 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0cc      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001374:	4b68      	ldr	r3, [pc, #416]	@ (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d90c      	bls.n	800139c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b65      	ldr	r3, [pc, #404]	@ (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b63      	ldr	r3, [pc, #396]	@ (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0b8      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b4:	4b59      	ldr	r3, [pc, #356]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a58      	ldr	r2, [pc, #352]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013cc:	4b53      	ldr	r3, [pc, #332]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a52      	ldr	r2, [pc, #328]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d8:	4b50      	ldr	r3, [pc, #320]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	494d      	ldr	r1, [pc, #308]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d044      	beq.n	8001480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b47      	ldr	r3, [pc, #284]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d119      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e07f      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d003      	beq.n	800141e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141a:	2b03      	cmp	r3, #3
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b3f      	ldr	r3, [pc, #252]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e06f      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e067      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143e:	4b37      	ldr	r3, [pc, #220]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f023 0203 	bic.w	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4934      	ldr	r1, [pc, #208]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001450:	f7ff fc28 	bl	8000ca4 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	e00a      	b.n	800146e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001458:	f7ff fc24 	bl	8000ca4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e04f      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 020c 	and.w	r2, r3, #12
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	429a      	cmp	r2, r3
 800147e:	d1eb      	bne.n	8001458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d20c      	bcs.n	80014a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e032      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4916      	ldr	r1, [pc, #88]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	490e      	ldr	r1, [pc, #56]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014e6:	f000 f855 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 80014ea:	4602      	mov	r2, r0
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	490a      	ldr	r1, [pc, #40]	@ (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	5ccb      	ldrb	r3, [r1, r3]
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RCC_ClockConfig+0x1c8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb88 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00
 800151c:	40023800 	.word	0x40023800
 8001520:	08003978 	.word	0x08003978
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_RCC_GetHCLKFreq+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000

08001544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001548:	f7ff fff0 	bl	800152c <HAL_RCC_GetHCLKFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	0a9b      	lsrs	r3, r3, #10
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	4903      	ldr	r1, [pc, #12]	@ (8001568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	08003988 	.word	0x08003988

0800156c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001570:	f7ff ffdc 	bl	800152c <HAL_RCC_GetHCLKFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	0b5b      	lsrs	r3, r3, #13
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	4903      	ldr	r1, [pc, #12]	@ (8001590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	08003988 	.word	0x08003988

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001598:	b0ae      	sub	sp, #184	@ 0xb8
 800159a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ba:	4bcb      	ldr	r3, [pc, #812]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	f200 8206 	bhi.w	80019d4 <HAL_RCC_GetSysClockFreq+0x440>
 80015c8:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	08001605 	.word	0x08001605
 80015d4:	080019d5 	.word	0x080019d5
 80015d8:	080019d5 	.word	0x080019d5
 80015dc:	080019d5 	.word	0x080019d5
 80015e0:	0800160d 	.word	0x0800160d
 80015e4:	080019d5 	.word	0x080019d5
 80015e8:	080019d5 	.word	0x080019d5
 80015ec:	080019d5 	.word	0x080019d5
 80015f0:	08001615 	.word	0x08001615
 80015f4:	080019d5 	.word	0x080019d5
 80015f8:	080019d5 	.word	0x080019d5
 80015fc:	080019d5 	.word	0x080019d5
 8001600:	08001805 	.word	0x08001805
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001604:	4bb9      	ldr	r3, [pc, #740]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800160a:	e1e7      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4bb8      	ldr	r3, [pc, #736]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800160e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001612:	e1e3      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001614:	4bb4      	ldr	r3, [pc, #720]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800161c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001620:	4bb1      	ldr	r3, [pc, #708]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d071      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162c:	4bae      	ldr	r3, [pc, #696]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	2200      	movs	r2, #0
 8001634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001638:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800163c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800164e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001652:	4622      	mov	r2, r4
 8001654:	462b      	mov	r3, r5
 8001656:	f04f 0000 	mov.w	r0, #0
 800165a:	f04f 0100 	mov.w	r1, #0
 800165e:	0159      	lsls	r1, r3, #5
 8001660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001664:	0150      	lsls	r0, r2, #5
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4621      	mov	r1, r4
 800166c:	1a51      	subs	r1, r2, r1
 800166e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001670:	4629      	mov	r1, r5
 8001672:	eb63 0301 	sbc.w	r3, r3, r1
 8001676:	647b      	str	r3, [r7, #68]	@ 0x44
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001684:	4649      	mov	r1, r9
 8001686:	018b      	lsls	r3, r1, #6
 8001688:	4641      	mov	r1, r8
 800168a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800168e:	4641      	mov	r1, r8
 8001690:	018a      	lsls	r2, r1, #6
 8001692:	4641      	mov	r1, r8
 8001694:	1a51      	subs	r1, r2, r1
 8001696:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001698:	4649      	mov	r1, r9
 800169a:	eb63 0301 	sbc.w	r3, r3, r1
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016ac:	4649      	mov	r1, r9
 80016ae:	00cb      	lsls	r3, r1, #3
 80016b0:	4641      	mov	r1, r8
 80016b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016b6:	4641      	mov	r1, r8
 80016b8:	00ca      	lsls	r2, r1, #3
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	4622      	mov	r2, r4
 80016c2:	189b      	adds	r3, r3, r2
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016c6:	462b      	mov	r3, r5
 80016c8:	460a      	mov	r2, r1
 80016ca:	eb42 0303 	adc.w	r3, r2, r3
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016dc:	4629      	mov	r1, r5
 80016de:	024b      	lsls	r3, r1, #9
 80016e0:	4621      	mov	r1, r4
 80016e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016e6:	4621      	mov	r1, r4
 80016e8:	024a      	lsls	r2, r1, #9
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001700:	f7fe fdde 	bl	80002c0 <__aeabi_uldivmod>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4613      	mov	r3, r2
 800170a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800170e:	e067      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800171c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800172a:	2300      	movs	r3, #0
 800172c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800172e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001732:	4622      	mov	r2, r4
 8001734:	462b      	mov	r3, r5
 8001736:	f04f 0000 	mov.w	r0, #0
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	0159      	lsls	r1, r3, #5
 8001740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001744:	0150      	lsls	r0, r2, #5
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4621      	mov	r1, r4
 800174c:	1a51      	subs	r1, r2, r1
 800174e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001750:	4629      	mov	r1, r5
 8001752:	eb63 0301 	sbc.w	r3, r3, r1
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001764:	4649      	mov	r1, r9
 8001766:	018b      	lsls	r3, r1, #6
 8001768:	4641      	mov	r1, r8
 800176a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800176e:	4641      	mov	r1, r8
 8001770:	018a      	lsls	r2, r1, #6
 8001772:	4641      	mov	r1, r8
 8001774:	ebb2 0a01 	subs.w	sl, r2, r1
 8001778:	4649      	mov	r1, r9
 800177a:	eb63 0b01 	sbc.w	fp, r3, r1
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800178a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800178e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001792:	4692      	mov	sl, r2
 8001794:	469b      	mov	fp, r3
 8001796:	4623      	mov	r3, r4
 8001798:	eb1a 0303 	adds.w	r3, sl, r3
 800179c:	623b      	str	r3, [r7, #32]
 800179e:	462b      	mov	r3, r5
 80017a0:	eb4b 0303 	adc.w	r3, fp, r3
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017b2:	4629      	mov	r1, r5
 80017b4:	028b      	lsls	r3, r1, #10
 80017b6:	4621      	mov	r1, r4
 80017b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017bc:	4621      	mov	r1, r4
 80017be:	028a      	lsls	r2, r1, #10
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017c8:	2200      	movs	r2, #0
 80017ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80017cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80017ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017d2:	f7fe fd75 	bl	80002c0 <__aeabi_uldivmod>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4613      	mov	r3, r2
 80017dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017e0:	4b41      	ldr	r3, [pc, #260]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	3301      	adds	r3, #1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001802:	e0eb      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001804:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001810:	4b35      	ldr	r3, [pc, #212]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d06b      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181c:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	2200      	movs	r2, #0
 8001824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800182a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800182e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001830:	2300      	movs	r3, #0
 8001832:	667b      	str	r3, [r7, #100]	@ 0x64
 8001834:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001838:	4622      	mov	r2, r4
 800183a:	462b      	mov	r3, r5
 800183c:	f04f 0000 	mov.w	r0, #0
 8001840:	f04f 0100 	mov.w	r1, #0
 8001844:	0159      	lsls	r1, r3, #5
 8001846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184a:	0150      	lsls	r0, r2, #5
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4621      	mov	r1, r4
 8001852:	1a51      	subs	r1, r2, r1
 8001854:	61b9      	str	r1, [r7, #24]
 8001856:	4629      	mov	r1, r5
 8001858:	eb63 0301 	sbc.w	r3, r3, r1
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800186a:	4659      	mov	r1, fp
 800186c:	018b      	lsls	r3, r1, #6
 800186e:	4651      	mov	r1, sl
 8001870:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001874:	4651      	mov	r1, sl
 8001876:	018a      	lsls	r2, r1, #6
 8001878:	4651      	mov	r1, sl
 800187a:	ebb2 0801 	subs.w	r8, r2, r1
 800187e:	4659      	mov	r1, fp
 8001880:	eb63 0901 	sbc.w	r9, r3, r1
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001890:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001894:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001898:	4690      	mov	r8, r2
 800189a:	4699      	mov	r9, r3
 800189c:	4623      	mov	r3, r4
 800189e:	eb18 0303 	adds.w	r3, r8, r3
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	462b      	mov	r3, r5
 80018a6:	eb49 0303 	adc.w	r3, r9, r3
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018b8:	4629      	mov	r1, r5
 80018ba:	024b      	lsls	r3, r1, #9
 80018bc:	4621      	mov	r1, r4
 80018be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c2:	4621      	mov	r1, r4
 80018c4:	024a      	lsls	r2, r1, #9
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ce:	2200      	movs	r2, #0
 80018d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018d8:	f7fe fcf2 	bl	80002c0 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018e6:	e065      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x420>
 80018e8:	40023800 	.word	0x40023800
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f4:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x458>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	2200      	movs	r2, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	4611      	mov	r1, r2
 8001900:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001904:	653b      	str	r3, [r7, #80]	@ 0x50
 8001906:	2300      	movs	r3, #0
 8001908:	657b      	str	r3, [r7, #84]	@ 0x54
 800190a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800190e:	4642      	mov	r2, r8
 8001910:	464b      	mov	r3, r9
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4641      	mov	r1, r8
 8001928:	1a51      	subs	r1, r2, r1
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	4649      	mov	r1, r9
 800192e:	eb63 0301 	sbc.w	r3, r3, r1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001940:	4659      	mov	r1, fp
 8001942:	018b      	lsls	r3, r1, #6
 8001944:	4651      	mov	r1, sl
 8001946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194a:	4651      	mov	r1, sl
 800194c:	018a      	lsls	r2, r1, #6
 800194e:	4651      	mov	r1, sl
 8001950:	1a54      	subs	r4, r2, r1
 8001952:	4659      	mov	r1, fp
 8001954:	eb63 0501 	sbc.w	r5, r3, r1
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	00eb      	lsls	r3, r5, #3
 8001962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001966:	00e2      	lsls	r2, r4, #3
 8001968:	4614      	mov	r4, r2
 800196a:	461d      	mov	r5, r3
 800196c:	4643      	mov	r3, r8
 800196e:	18e3      	adds	r3, r4, r3
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	464b      	mov	r3, r9
 8001974:	eb45 0303 	adc.w	r3, r5, r3
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001986:	4629      	mov	r1, r5
 8001988:	028b      	lsls	r3, r1, #10
 800198a:	4621      	mov	r1, r4
 800198c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001990:	4621      	mov	r1, r4
 8001992:	028a      	lsls	r2, r1, #10
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800199c:	2200      	movs	r2, #0
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019a6:	f7fe fc8b 	bl	80002c0 <__aeabi_uldivmod>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4613      	mov	r3, r2
 80019b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019b4:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x458>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	0f1b      	lsrs	r3, r3, #28
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80019c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019d2:	e003      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	37b8      	adds	r7, #184	@ 0xb8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400

080019f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e28d      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8083 	beq.w	8001b1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a14:	4b94      	ldr	r3, [pc, #592]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d019      	beq.n	8001a54 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a20:	4b91      	ldr	r3, [pc, #580]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a38:	d00c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a46:	4b88      	ldr	r3, [pc, #544]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a52:	d10b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b84      	ldr	r3, [pc, #528]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x124>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d157      	bne.n	8001b18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e25a      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x90>
 8001a76:	4b7c      	ldr	r3, [pc, #496]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xcc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xb4>
 8001a8e:	4b76      	ldr	r3, [pc, #472]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a75      	ldr	r2, [pc, #468]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b73      	ldr	r3, [pc, #460]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a72      	ldr	r2, [pc, #456]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xcc>
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6e      	ldr	r2, [pc, #440]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a6b      	ldr	r2, [pc, #428]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f8ec 	bl	8000ca4 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8e8 	bl	8000ca4 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e21f      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xdc>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f8d8 	bl	8000ca4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f8d4 	bl	8000ca4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e20b      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	4b57      	ldr	r3, [pc, #348]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x104>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d06f      	beq.n	8001c06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b26:	4b50      	ldr	r3, [pc, #320]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d017      	beq.n	8001b62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b32:	4b4d      	ldr	r3, [pc, #308]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d105      	bne.n	8001b4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b56:	4b44      	ldr	r3, [pc, #272]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b41      	ldr	r3, [pc, #260]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x186>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1d3      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4937      	ldr	r1, [pc, #220]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_RCC_OscConfig+0x278>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f881 	bl	8000ca4 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f87d 	bl	8000ca4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1b4      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4925      	ldr	r1, [pc, #148]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_RCC_OscConfig+0x278>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f860 	bl	8000ca4 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff f85c 	bl	8000ca4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e193      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d036      	beq.n	8001c80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d016      	beq.n	8001c48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f840 	bl	8000ca4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff f83c 	bl	8000ca4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e173      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x234>
 8001c46:	e01b      	b.n	8001c80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f829 	bl	8000ca4 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	e00e      	b.n	8001c74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c56:	f7ff f825 	bl	8000ca4 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d907      	bls.n	8001c74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e15c      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	42470000 	.word	0x42470000
 8001c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	4b8a      	ldr	r3, [pc, #552]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ea      	bne.n	8001c56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8097 	beq.w	8001dbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b83      	ldr	r3, [pc, #524]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b79      	ldr	r3, [pc, #484]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b76      	ldr	r3, [pc, #472]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a75      	ldr	r2, [pc, #468]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b0>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ffe5 	bl	8000ca4 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7fe ffe1 	bl	8000ca4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e118      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x31e>
 8001d04:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d08:	4a65      	ldr	r2, [pc, #404]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x358>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x340>
 8001d1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1e:	4a60      	ldr	r2, [pc, #384]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d26:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0x358>
 8001d34:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	4a59      	ldr	r2, [pc, #356]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d40:	4b57      	ldr	r3, [pc, #348]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d44:	4a56      	ldr	r2, [pc, #344]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d46:	f023 0304 	bic.w	r3, r3, #4
 8001d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d015      	beq.n	8001d80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7fe ffa6 	bl	8000ca4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ffa2 	bl	8000ca4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0d7      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d72:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ee      	beq.n	8001d5c <HAL_RCC_OscConfig+0x368>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7fe ff90 	bl	8000ca4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe ff8c 	bl	8000ca4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0c1      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ee      	bne.n	8001d88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80ad 	beq.w	8001f20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d060      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d145      	bne.n	8001e66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b33      	ldr	r3, [pc, #204]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff60 	bl	8000ca4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ff5c 	bl	8000ca4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e093      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	071b      	lsls	r3, r3, #28
 8001e32:	491b      	ldr	r1, [pc, #108]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b4>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ff31 	bl	8000ca4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7fe ff2d 	bl	8000ca4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e064      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x452>
 8001e64:	e05c      	b.n	8001f20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff1a 	bl	8000ca4 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe ff16 	bl	8000ca4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e04d      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x480>
 8001e92:	e045      	b.n	8001f20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e040      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <HAL_RCC_OscConfig+0x538>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d030      	beq.n	8001f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d129      	bne.n	8001f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d122      	bne.n	8001f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d119      	bne.n	8001f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10f      	bne.n	8001f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e042      	b.n	8001fc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fd42 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fdbd 	bl	8002af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d175      	bne.n	80020dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_UART_Transmit+0x2c>
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e06e      	b.n	80020de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2221      	movs	r2, #33	@ 0x21
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800200e:	f7fe fe49 	bl	8000ca4 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002028:	d108      	bne.n	800203c <HAL_UART_Transmit+0x6c>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d104      	bne.n	800203c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	e003      	b.n	8002044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002044:	e02e      	b.n	80020a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fb1f 	bl	8002694 <UART_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e03a      	b.n	80020de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10b      	bne.n	8002086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800207c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3302      	adds	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	e007      	b.n	8002096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1cb      	bne.n	8002046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 faeb 	bl	8002694 <UART_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e006      	b.n	80020de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	4613      	mov	r3, r2
 80020f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d112      	bne.n	8002126 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_UART_Receive_IT+0x26>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e00b      	b.n	8002128 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	461a      	mov	r2, r3
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fb12 	bl	8002746 <UART_Start_Receive_IT>
 8002122:	4603      	mov	r3, r0
 8002124:	e000      	b.n	8002128 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0ba      	sub	sp, #232	@ 0xe8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800216e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_UART_IRQHandler+0x66>
 8002182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fbf2 	bl	8002978 <UART_Receive_IT>
      return;
 8002194:	e25b      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80de 	beq.w	800235c <HAL_UART_IRQHandler+0x22c>
 80021a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80d1 	beq.w	800235c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_UART_IRQHandler+0xae>
 80021c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_UART_IRQHandler+0xd2>
 80021ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f043 0202 	orr.w	r2, r3, #2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_UART_IRQHandler+0xf6>
 800220e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f043 0204 	orr.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d011      	beq.n	8002256 <HAL_UART_IRQHandler+0x126>
 8002232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800223e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f043 0208 	orr.w	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 81f2 	beq.w	8002644 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_UART_IRQHandler+0x14e>
 800226c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fb7d 	bl	8002978 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002288:	2b40      	cmp	r3, #64	@ 0x40
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <HAL_UART_IRQHandler+0x17a>
 80022a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04f      	beq.n	800234a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa85 	bl	80027ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	2b40      	cmp	r3, #64	@ 0x40
 80022bc:	d141      	bne.n	8002342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80022ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1d9      	bne.n	80022be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d013      	beq.n	800233a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002316:	4a7e      	ldr	r2, [pc, #504]	@ (8002510 <HAL_UART_IRQHandler+0x3e0>)
 8002318:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fe4d 	bl	8000fbe <HAL_DMA_Abort_IT>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	e00e      	b.n	8002358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f994 	bl	8002668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002340:	e00a      	b.n	8002358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f990 	bl	8002668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	e006      	b.n	8002358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f98c 	bl	8002668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002356:	e175      	b.n	8002644 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	bf00      	nop
    return;
 800235a:	e173      	b.n	8002644 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 814f 	bne.w	8002604 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8148 	beq.w	8002604 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8141 	beq.w	8002604 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	2b40      	cmp	r3, #64	@ 0x40
 80023a4:	f040 80b6 	bne.w	8002514 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8145 	beq.w	8002648 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023c6:	429a      	cmp	r2, r3
 80023c8:	f080 813e 	bcs.w	8002648 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023de:	f000 8088 	beq.w	80024f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80023f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	330c      	adds	r3, #12
 800240a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800240e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800241a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1d9      	bne.n	80023e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3314      	adds	r3, #20
 8002434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800243e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3314      	adds	r3, #20
 800244e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002452:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800245a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e1      	bne.n	800242e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3314      	adds	r3, #20
 8002470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800247a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3314      	adds	r3, #20
 800248a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800248e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800249c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e3      	bne.n	800246a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024ba:	e853 3f00 	ldrex	r3, [r3]
 80024be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024c2:	f023 0310 	bic.w	r3, r3, #16
 80024c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e3      	bne.n	80024b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fcf6 	bl	8000ede <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002500:	b29b      	uxth	r3, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	b29b      	uxth	r3, r3
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8b7 	bl	800267c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800250e:	e09b      	b.n	8002648 <HAL_UART_IRQHandler+0x518>
 8002510:	08002881 	.word	0x08002881
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800251c:	b29b      	uxth	r3, r3
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 808e 	beq.w	800264c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8089 	beq.w	800264c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800254a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002550:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800255e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002560:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800256c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e3      	bne.n	800253a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	e853 3f00 	ldrex	r3, [r3]
 8002580:	623b      	str	r3, [r7, #32]
   return(result);
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002596:	633a      	str	r2, [r7, #48]	@ 0x30
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800259c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e3      	bne.n	8002572 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	e853 3f00 	ldrex	r3, [r3]
 80025c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0310 	bic.w	r3, r3, #16
 80025ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025dc:	61fa      	str	r2, [r7, #28]
 80025de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e0:	69b9      	ldr	r1, [r7, #24]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	e841 2300 	strex	r3, r2, [r1]
 80025e8:	617b      	str	r3, [r7, #20]
   return(result);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e3      	bne.n	80025b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f83d 	bl	800267c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002602:	e023      	b.n	800264c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_UART_IRQHandler+0x4f4>
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f943 	bl	80028a8 <UART_Transmit_IT>
    return;
 8002622:	e014      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <HAL_UART_IRQHandler+0x51e>
 8002630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f983 	bl	8002948 <UART_EndTransmit_IT>
    return;
 8002642:	e004      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
    return;
 8002644:	bf00      	nop
 8002646:	e002      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
      return;
 8002648:	bf00      	nop
 800264a:	e000      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
      return;
 800264c:	bf00      	nop
  }
}
 800264e:	37e8      	adds	r7, #232	@ 0xe8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a4:	e03b      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d037      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe faf9 	bl	8000ca4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e03a      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d023      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b80      	cmp	r3, #128	@ 0x80
 80026da:	d020      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b40      	cmp	r3, #64	@ 0x40
 80026e0:	d01d      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d116      	bne.n	800271e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f857 	bl	80027ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2208      	movs	r2, #8
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	429a      	cmp	r2, r3
 800273a:	d0b4      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	4613      	mov	r3, r2
 8002752:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2222      	movs	r2, #34	@ 0x22
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0220 	orr.w	r2, r2, #32
 80027aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b095      	sub	sp, #84	@ 0x54
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027cc:	e853 3f00 	ldrex	r3, [r3]
 80027d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
 80027e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80027e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e5      	bne.n	80027c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	61fb      	str	r3, [r7, #28]
   return(result);
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3314      	adds	r3, #20
 8002814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800281c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e5      	bne.n	80027f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	2b01      	cmp	r3, #1
 8002830:	d119      	bne.n	8002866 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	e853 3f00 	ldrex	r3, [r3]
 8002840:	60bb      	str	r3, [r7, #8]
   return(result);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f023 0310 	bic.w	r3, r3, #16
 8002848:	647b      	str	r3, [r7, #68]	@ 0x44
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002852:	61ba      	str	r2, [r7, #24]
 8002854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	6979      	ldr	r1, [r7, #20]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	613b      	str	r3, [r7, #16]
   return(result);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e5      	bne.n	8002832 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002874:	bf00      	nop
 8002876:	3754      	adds	r7, #84	@ 0x54
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff fee4 	bl	8002668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b21      	cmp	r3, #33	@ 0x21
 80028ba:	d13e      	bne.n	800293a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028c4:	d114      	bne.n	80028f0 <UART_Transmit_IT+0x48>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d110      	bne.n	80028f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	1c9a      	adds	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	621a      	str	r2, [r3, #32]
 80028ee:	e008      	b.n	8002902 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	1c59      	adds	r1, r3, #1
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6211      	str	r1, [r2, #32]
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29b      	uxth	r3, r3
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4619      	mov	r1, r3
 8002910:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002924:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002934:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800295e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fe73 	bl	8002654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	@ 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b22      	cmp	r3, #34	@ 0x22
 800298a:	f040 80ae 	bne.w	8002aea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002996:	d117      	bne.n	80029c8 <UART_Receive_IT+0x50>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d113      	bne.n	80029c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	1c9a      	adds	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80029c6:	e026      	b.n	8002a16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029da:	d007      	beq.n	80029ec <UART_Receive_IT+0x74>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <UART_Receive_IT+0x82>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e008      	b.n	8002a0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4619      	mov	r1, r3
 8002a24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d15d      	bne.n	8002ae6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0220 	bic.w	r2, r2, #32
 8002a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d135      	bne.n	8002adc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	613b      	str	r3, [r7, #16]
   return(result);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f023 0310 	bic.w	r3, r3, #16
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a96:	623a      	str	r2, [r7, #32]
 8002a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	69f9      	ldr	r1, [r7, #28]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e5      	bne.n	8002a76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d10a      	bne.n	8002ace <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fdd1 	bl	800267c <HAL_UARTEx_RxEventCallback>
 8002ada:	e002      	b.n	8002ae2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fd fdbb 	bl	8000658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e002      	b.n	8002aec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3730      	adds	r7, #48	@ 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b0c0      	sub	sp, #256	@ 0x100
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	ea40 0301 	orr.w	r3, r0, r1
 8002b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b4c:	f021 010c 	bic.w	r1, r1, #12
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	6999      	ldr	r1, [r3, #24]
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	ea40 0301 	orr.w	r3, r0, r1
 8002b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <UART_SetConfig+0x2cc>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d005      	beq.n	8002b94 <UART_SetConfig+0xa0>
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <UART_SetConfig+0x2d0>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d104      	bne.n	8002b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7fe fcea 	bl	800156c <HAL_RCC_GetPCLK2Freq>
 8002b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b9c:	e003      	b.n	8002ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9e:	f7fe fcd1 	bl	8001544 <HAL_RCC_GetPCLK1Freq>
 8002ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb0:	f040 810c 	bne.w	8002dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	eb12 0801 	adds.w	r8, r2, r1
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb43 0901 	adc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c04:	462b      	mov	r3, r5
 8002c06:	eb49 0303 	adc.w	r3, r9, r3
 8002c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c22:	460b      	mov	r3, r1
 8002c24:	18db      	adds	r3, r3, r3
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c28:	4613      	mov	r3, r2
 8002c2a:	eb42 0303 	adc.w	r3, r2, r3
 8002c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c38:	f7fd fb42 	bl	80002c0 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b61      	ldr	r3, [pc, #388]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002c42:	fba3 2302 	umull	r2, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	011c      	lsls	r4, r3, #4
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c64:	415b      	adcs	r3, r3
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c72:	4649      	mov	r1, r9
 8002c74:	eb43 0b01 	adc.w	fp, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c8c:	4692      	mov	sl, r2
 8002c8e:	469b      	mov	fp, r3
 8002c90:	4643      	mov	r3, r8
 8002c92:	eb1a 0303 	adds.w	r3, sl, r3
 8002c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cce:	f7fd faf7 	bl	80002c0 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002cda:	fba3 2301 	umull	r2, r3, r3, r1
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2264      	movs	r2, #100	@ 0x64
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	1acb      	subs	r3, r1, r3
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cee:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cfc:	441c      	add	r4, r3
 8002cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d20:	4641      	mov	r1, r8
 8002d22:	1851      	adds	r1, r2, r1
 8002d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d26:	4649      	mov	r1, r9
 8002d28:	414b      	adcs	r3, r1
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d38:	4659      	mov	r1, fp
 8002d3a:	00cb      	lsls	r3, r1, #3
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d42:	4651      	mov	r1, sl
 8002d44:	00ca      	lsls	r2, r1, #3
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d54:	464b      	mov	r3, r9
 8002d56:	460a      	mov	r2, r1
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d74:	460b      	mov	r3, r1
 8002d76:	18db      	adds	r3, r3, r3
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d8a:	f7fd fa99 	bl	80002c0 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	@ 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3332      	adds	r3, #50	@ 0x32
 8002da6:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <UART_SetConfig+0x2d4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4422      	add	r2, r4
 8002dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dbc:	e106      	b.n	8002fcc <UART_SetConfig+0x4d8>
 8002dbe:	bf00      	nop
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dde:	4642      	mov	r2, r8
 8002de0:	464b      	mov	r3, r9
 8002de2:	1891      	adds	r1, r2, r2
 8002de4:	6239      	str	r1, [r7, #32]
 8002de6:	415b      	adcs	r3, r3
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dee:	4641      	mov	r1, r8
 8002df0:	1854      	adds	r4, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb43 0501 	adc.w	r5, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e14:	464b      	mov	r3, r9
 8002e16:	eb45 0303 	adc.w	r3, r5, r3
 8002e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	008b      	lsls	r3, r1, #2
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e44:	4621      	mov	r1, r4
 8002e46:	008a      	lsls	r2, r1, #2
 8002e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e4c:	f7fd fa38 	bl	80002c0 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002e56:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	011c      	lsls	r4, r3, #4
 8002e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	61b9      	str	r1, [r7, #24]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	4641      	mov	r1, r8
 8002e82:	1851      	adds	r1, r2, r1
 8002e84:	6139      	str	r1, [r7, #16]
 8002e86:	4649      	mov	r1, r9
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	00cb      	lsls	r3, r1, #3
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	00ca      	lsls	r2, r1, #3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4642      	mov	r2, r8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	460a      	mov	r2, r1
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ed8:	4649      	mov	r1, r9
 8002eda:	008b      	lsls	r3, r1, #2
 8002edc:	4641      	mov	r1, r8
 8002ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	008a      	lsls	r2, r1, #2
 8002ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eea:	f7fd f9e9 	bl	80002c0 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2264      	movs	r2, #100	@ 0x64
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	1acb      	subs	r3, r1, r3
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	3332      	adds	r3, #50	@ 0x32
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f14:	441c      	add	r4, r3
 8002f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	1891      	adds	r1, r2, r2
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	415b      	adcs	r3, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f34:	4641      	mov	r1, r8
 8002f36:	1851      	adds	r1, r2, r1
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	414b      	adcs	r3, r1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	00cb      	lsls	r3, r1, #3
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f56:	4651      	mov	r1, sl
 8002f58:	00ca      	lsls	r2, r1, #3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4642      	mov	r2, r8
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f66:	464b      	mov	r3, r9
 8002f68:	460a      	mov	r2, r1
 8002f6a:	eb42 0303 	adc.w	r3, r2, r3
 8002f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f88:	4649      	mov	r1, r9
 8002f8a:	008b      	lsls	r3, r1, #2
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f92:	4641      	mov	r1, r8
 8002f94:	008a      	lsls	r2, r1, #2
 8002f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f9a:	f7fd f991 	bl	80002c0 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	@ 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	3332      	adds	r3, #50	@ 0x32
 8002fb6:	4a08      	ldr	r2, [pc, #32]	@ (8002fd8 <UART_SetConfig+0x4e4>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4422      	add	r2, r4
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd8:	51eb851f 	.word	0x51eb851f

08002fdc <sniprintf>:
 8002fdc:	b40c      	push	{r2, r3}
 8002fde:	b530      	push	{r4, r5, lr}
 8002fe0:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <sniprintf+0x64>)
 8002fe2:	1e0c      	subs	r4, r1, #0
 8002fe4:	681d      	ldr	r5, [r3, #0]
 8002fe6:	b09d      	sub	sp, #116	@ 0x74
 8002fe8:	da08      	bge.n	8002ffc <sniprintf+0x20>
 8002fea:	238b      	movs	r3, #139	@ 0x8b
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff2:	b01d      	add	sp, #116	@ 0x74
 8002ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ff8:	b002      	add	sp, #8
 8002ffa:	4770      	bx	lr
 8002ffc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003000:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003004:	bf14      	ite	ne
 8003006:	f104 33ff 	addne.w	r3, r4, #4294967295
 800300a:	4623      	moveq	r3, r4
 800300c:	9304      	str	r3, [sp, #16]
 800300e:	9307      	str	r3, [sp, #28]
 8003010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003014:	9002      	str	r0, [sp, #8]
 8003016:	9006      	str	r0, [sp, #24]
 8003018:	f8ad 3016 	strh.w	r3, [sp, #22]
 800301c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800301e:	ab21      	add	r3, sp, #132	@ 0x84
 8003020:	a902      	add	r1, sp, #8
 8003022:	4628      	mov	r0, r5
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	f000 f995 	bl	8003354 <_svfiprintf_r>
 800302a:	1c43      	adds	r3, r0, #1
 800302c:	bfbc      	itt	lt
 800302e:	238b      	movlt	r3, #139	@ 0x8b
 8003030:	602b      	strlt	r3, [r5, #0]
 8003032:	2c00      	cmp	r4, #0
 8003034:	d0dd      	beq.n	8002ff2 <sniprintf+0x16>
 8003036:	9b02      	ldr	r3, [sp, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e7d9      	b.n	8002ff2 <sniprintf+0x16>
 800303e:	bf00      	nop
 8003040:	2000000c 	.word	0x2000000c

08003044 <memset>:
 8003044:	4402      	add	r2, r0
 8003046:	4603      	mov	r3, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <__errno>:
 8003054:	4b01      	ldr	r3, [pc, #4]	@ (800305c <__errno+0x8>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	2000000c 	.word	0x2000000c

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4d0d      	ldr	r5, [pc, #52]	@ (8003098 <__libc_init_array+0x38>)
 8003064:	4c0d      	ldr	r4, [pc, #52]	@ (800309c <__libc_init_array+0x3c>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	2600      	movs	r6, #0
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	4d0b      	ldr	r5, [pc, #44]	@ (80030a0 <__libc_init_array+0x40>)
 8003072:	4c0c      	ldr	r4, [pc, #48]	@ (80030a4 <__libc_init_array+0x44>)
 8003074:	f000 fc66 	bl	8003944 <_init>
 8003078:	1b64      	subs	r4, r4, r5
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	2600      	movs	r6, #0
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	f855 3b04 	ldr.w	r3, [r5], #4
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	080039cc 	.word	0x080039cc
 800309c:	080039cc 	.word	0x080039cc
 80030a0:	080039cc 	.word	0x080039cc
 80030a4:	080039d0 	.word	0x080039d0

080030a8 <__retarget_lock_acquire_recursive>:
 80030a8:	4770      	bx	lr

080030aa <__retarget_lock_release_recursive>:
 80030aa:	4770      	bx	lr

080030ac <_free_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4605      	mov	r5, r0
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d041      	beq.n	8003138 <_free_r+0x8c>
 80030b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030b8:	1f0c      	subs	r4, r1, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bfb8      	it	lt
 80030be:	18e4      	addlt	r4, r4, r3
 80030c0:	f000 f8e0 	bl	8003284 <__malloc_lock>
 80030c4:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <_free_r+0x90>)
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	b933      	cbnz	r3, 80030d8 <_free_r+0x2c>
 80030ca:	6063      	str	r3, [r4, #4]
 80030cc:	6014      	str	r4, [r2, #0]
 80030ce:	4628      	mov	r0, r5
 80030d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030d4:	f000 b8dc 	b.w	8003290 <__malloc_unlock>
 80030d8:	42a3      	cmp	r3, r4
 80030da:	d908      	bls.n	80030ee <_free_r+0x42>
 80030dc:	6820      	ldr	r0, [r4, #0]
 80030de:	1821      	adds	r1, r4, r0
 80030e0:	428b      	cmp	r3, r1
 80030e2:	bf01      	itttt	eq
 80030e4:	6819      	ldreq	r1, [r3, #0]
 80030e6:	685b      	ldreq	r3, [r3, #4]
 80030e8:	1809      	addeq	r1, r1, r0
 80030ea:	6021      	streq	r1, [r4, #0]
 80030ec:	e7ed      	b.n	80030ca <_free_r+0x1e>
 80030ee:	461a      	mov	r2, r3
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	b10b      	cbz	r3, 80030f8 <_free_r+0x4c>
 80030f4:	42a3      	cmp	r3, r4
 80030f6:	d9fa      	bls.n	80030ee <_free_r+0x42>
 80030f8:	6811      	ldr	r1, [r2, #0]
 80030fa:	1850      	adds	r0, r2, r1
 80030fc:	42a0      	cmp	r0, r4
 80030fe:	d10b      	bne.n	8003118 <_free_r+0x6c>
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	4401      	add	r1, r0
 8003104:	1850      	adds	r0, r2, r1
 8003106:	4283      	cmp	r3, r0
 8003108:	6011      	str	r1, [r2, #0]
 800310a:	d1e0      	bne.n	80030ce <_free_r+0x22>
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	6053      	str	r3, [r2, #4]
 8003112:	4408      	add	r0, r1
 8003114:	6010      	str	r0, [r2, #0]
 8003116:	e7da      	b.n	80030ce <_free_r+0x22>
 8003118:	d902      	bls.n	8003120 <_free_r+0x74>
 800311a:	230c      	movs	r3, #12
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	e7d6      	b.n	80030ce <_free_r+0x22>
 8003120:	6820      	ldr	r0, [r4, #0]
 8003122:	1821      	adds	r1, r4, r0
 8003124:	428b      	cmp	r3, r1
 8003126:	bf04      	itt	eq
 8003128:	6819      	ldreq	r1, [r3, #0]
 800312a:	685b      	ldreq	r3, [r3, #4]
 800312c:	6063      	str	r3, [r4, #4]
 800312e:	bf04      	itt	eq
 8003130:	1809      	addeq	r1, r1, r0
 8003132:	6021      	streq	r1, [r4, #0]
 8003134:	6054      	str	r4, [r2, #4]
 8003136:	e7ca      	b.n	80030ce <_free_r+0x22>
 8003138:	bd38      	pop	{r3, r4, r5, pc}
 800313a:	bf00      	nop
 800313c:	20000274 	.word	0x20000274

08003140 <sbrk_aligned>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4e0f      	ldr	r6, [pc, #60]	@ (8003180 <sbrk_aligned+0x40>)
 8003144:	460c      	mov	r4, r1
 8003146:	6831      	ldr	r1, [r6, #0]
 8003148:	4605      	mov	r5, r0
 800314a:	b911      	cbnz	r1, 8003152 <sbrk_aligned+0x12>
 800314c:	f000 fba6 	bl	800389c <_sbrk_r>
 8003150:	6030      	str	r0, [r6, #0]
 8003152:	4621      	mov	r1, r4
 8003154:	4628      	mov	r0, r5
 8003156:	f000 fba1 	bl	800389c <_sbrk_r>
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	d103      	bne.n	8003166 <sbrk_aligned+0x26>
 800315e:	f04f 34ff 	mov.w	r4, #4294967295
 8003162:	4620      	mov	r0, r4
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	1cc4      	adds	r4, r0, #3
 8003168:	f024 0403 	bic.w	r4, r4, #3
 800316c:	42a0      	cmp	r0, r4
 800316e:	d0f8      	beq.n	8003162 <sbrk_aligned+0x22>
 8003170:	1a21      	subs	r1, r4, r0
 8003172:	4628      	mov	r0, r5
 8003174:	f000 fb92 	bl	800389c <_sbrk_r>
 8003178:	3001      	adds	r0, #1
 800317a:	d1f2      	bne.n	8003162 <sbrk_aligned+0x22>
 800317c:	e7ef      	b.n	800315e <sbrk_aligned+0x1e>
 800317e:	bf00      	nop
 8003180:	20000270 	.word	0x20000270

08003184 <_malloc_r>:
 8003184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003188:	1ccd      	adds	r5, r1, #3
 800318a:	f025 0503 	bic.w	r5, r5, #3
 800318e:	3508      	adds	r5, #8
 8003190:	2d0c      	cmp	r5, #12
 8003192:	bf38      	it	cc
 8003194:	250c      	movcc	r5, #12
 8003196:	2d00      	cmp	r5, #0
 8003198:	4606      	mov	r6, r0
 800319a:	db01      	blt.n	80031a0 <_malloc_r+0x1c>
 800319c:	42a9      	cmp	r1, r5
 800319e:	d904      	bls.n	80031aa <_malloc_r+0x26>
 80031a0:	230c      	movs	r3, #12
 80031a2:	6033      	str	r3, [r6, #0]
 80031a4:	2000      	movs	r0, #0
 80031a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003280 <_malloc_r+0xfc>
 80031ae:	f000 f869 	bl	8003284 <__malloc_lock>
 80031b2:	f8d8 3000 	ldr.w	r3, [r8]
 80031b6:	461c      	mov	r4, r3
 80031b8:	bb44      	cbnz	r4, 800320c <_malloc_r+0x88>
 80031ba:	4629      	mov	r1, r5
 80031bc:	4630      	mov	r0, r6
 80031be:	f7ff ffbf 	bl	8003140 <sbrk_aligned>
 80031c2:	1c43      	adds	r3, r0, #1
 80031c4:	4604      	mov	r4, r0
 80031c6:	d158      	bne.n	800327a <_malloc_r+0xf6>
 80031c8:	f8d8 4000 	ldr.w	r4, [r8]
 80031cc:	4627      	mov	r7, r4
 80031ce:	2f00      	cmp	r7, #0
 80031d0:	d143      	bne.n	800325a <_malloc_r+0xd6>
 80031d2:	2c00      	cmp	r4, #0
 80031d4:	d04b      	beq.n	800326e <_malloc_r+0xea>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	4639      	mov	r1, r7
 80031da:	4630      	mov	r0, r6
 80031dc:	eb04 0903 	add.w	r9, r4, r3
 80031e0:	f000 fb5c 	bl	800389c <_sbrk_r>
 80031e4:	4581      	cmp	r9, r0
 80031e6:	d142      	bne.n	800326e <_malloc_r+0xea>
 80031e8:	6821      	ldr	r1, [r4, #0]
 80031ea:	1a6d      	subs	r5, r5, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	4630      	mov	r0, r6
 80031f0:	f7ff ffa6 	bl	8003140 <sbrk_aligned>
 80031f4:	3001      	adds	r0, #1
 80031f6:	d03a      	beq.n	800326e <_malloc_r+0xea>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	442b      	add	r3, r5
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	bb62      	cbnz	r2, 8003260 <_malloc_r+0xdc>
 8003206:	f8c8 7000 	str.w	r7, [r8]
 800320a:	e00f      	b.n	800322c <_malloc_r+0xa8>
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	1b52      	subs	r2, r2, r5
 8003210:	d420      	bmi.n	8003254 <_malloc_r+0xd0>
 8003212:	2a0b      	cmp	r2, #11
 8003214:	d917      	bls.n	8003246 <_malloc_r+0xc2>
 8003216:	1961      	adds	r1, r4, r5
 8003218:	42a3      	cmp	r3, r4
 800321a:	6025      	str	r5, [r4, #0]
 800321c:	bf18      	it	ne
 800321e:	6059      	strne	r1, [r3, #4]
 8003220:	6863      	ldr	r3, [r4, #4]
 8003222:	bf08      	it	eq
 8003224:	f8c8 1000 	streq.w	r1, [r8]
 8003228:	5162      	str	r2, [r4, r5]
 800322a:	604b      	str	r3, [r1, #4]
 800322c:	4630      	mov	r0, r6
 800322e:	f000 f82f 	bl	8003290 <__malloc_unlock>
 8003232:	f104 000b 	add.w	r0, r4, #11
 8003236:	1d23      	adds	r3, r4, #4
 8003238:	f020 0007 	bic.w	r0, r0, #7
 800323c:	1ac2      	subs	r2, r0, r3
 800323e:	bf1c      	itt	ne
 8003240:	1a1b      	subne	r3, r3, r0
 8003242:	50a3      	strne	r3, [r4, r2]
 8003244:	e7af      	b.n	80031a6 <_malloc_r+0x22>
 8003246:	6862      	ldr	r2, [r4, #4]
 8003248:	42a3      	cmp	r3, r4
 800324a:	bf0c      	ite	eq
 800324c:	f8c8 2000 	streq.w	r2, [r8]
 8003250:	605a      	strne	r2, [r3, #4]
 8003252:	e7eb      	b.n	800322c <_malloc_r+0xa8>
 8003254:	4623      	mov	r3, r4
 8003256:	6864      	ldr	r4, [r4, #4]
 8003258:	e7ae      	b.n	80031b8 <_malloc_r+0x34>
 800325a:	463c      	mov	r4, r7
 800325c:	687f      	ldr	r7, [r7, #4]
 800325e:	e7b6      	b.n	80031ce <_malloc_r+0x4a>
 8003260:	461a      	mov	r2, r3
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	42a3      	cmp	r3, r4
 8003266:	d1fb      	bne.n	8003260 <_malloc_r+0xdc>
 8003268:	2300      	movs	r3, #0
 800326a:	6053      	str	r3, [r2, #4]
 800326c:	e7de      	b.n	800322c <_malloc_r+0xa8>
 800326e:	230c      	movs	r3, #12
 8003270:	6033      	str	r3, [r6, #0]
 8003272:	4630      	mov	r0, r6
 8003274:	f000 f80c 	bl	8003290 <__malloc_unlock>
 8003278:	e794      	b.n	80031a4 <_malloc_r+0x20>
 800327a:	6005      	str	r5, [r0, #0]
 800327c:	e7d6      	b.n	800322c <_malloc_r+0xa8>
 800327e:	bf00      	nop
 8003280:	20000274 	.word	0x20000274

08003284 <__malloc_lock>:
 8003284:	4801      	ldr	r0, [pc, #4]	@ (800328c <__malloc_lock+0x8>)
 8003286:	f7ff bf0f 	b.w	80030a8 <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	2000026c 	.word	0x2000026c

08003290 <__malloc_unlock>:
 8003290:	4801      	ldr	r0, [pc, #4]	@ (8003298 <__malloc_unlock+0x8>)
 8003292:	f7ff bf0a 	b.w	80030aa <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	2000026c 	.word	0x2000026c

0800329c <__ssputs_r>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	688e      	ldr	r6, [r1, #8]
 80032a2:	461f      	mov	r7, r3
 80032a4:	42be      	cmp	r6, r7
 80032a6:	680b      	ldr	r3, [r1, #0]
 80032a8:	4682      	mov	sl, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	4690      	mov	r8, r2
 80032ae:	d82d      	bhi.n	800330c <__ssputs_r+0x70>
 80032b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80032b8:	d026      	beq.n	8003308 <__ssputs_r+0x6c>
 80032ba:	6965      	ldr	r5, [r4, #20]
 80032bc:	6909      	ldr	r1, [r1, #16]
 80032be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032c2:	eba3 0901 	sub.w	r9, r3, r1
 80032c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032ca:	1c7b      	adds	r3, r7, #1
 80032cc:	444b      	add	r3, r9
 80032ce:	106d      	asrs	r5, r5, #1
 80032d0:	429d      	cmp	r5, r3
 80032d2:	bf38      	it	cc
 80032d4:	461d      	movcc	r5, r3
 80032d6:	0553      	lsls	r3, r2, #21
 80032d8:	d527      	bpl.n	800332a <__ssputs_r+0x8e>
 80032da:	4629      	mov	r1, r5
 80032dc:	f7ff ff52 	bl	8003184 <_malloc_r>
 80032e0:	4606      	mov	r6, r0
 80032e2:	b360      	cbz	r0, 800333e <__ssputs_r+0xa2>
 80032e4:	6921      	ldr	r1, [r4, #16]
 80032e6:	464a      	mov	r2, r9
 80032e8:	f000 fae8 	bl	80038bc <memcpy>
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f6:	81a3      	strh	r3, [r4, #12]
 80032f8:	6126      	str	r6, [r4, #16]
 80032fa:	6165      	str	r5, [r4, #20]
 80032fc:	444e      	add	r6, r9
 80032fe:	eba5 0509 	sub.w	r5, r5, r9
 8003302:	6026      	str	r6, [r4, #0]
 8003304:	60a5      	str	r5, [r4, #8]
 8003306:	463e      	mov	r6, r7
 8003308:	42be      	cmp	r6, r7
 800330a:	d900      	bls.n	800330e <__ssputs_r+0x72>
 800330c:	463e      	mov	r6, r7
 800330e:	6820      	ldr	r0, [r4, #0]
 8003310:	4632      	mov	r2, r6
 8003312:	4641      	mov	r1, r8
 8003314:	f000 faa8 	bl	8003868 <memmove>
 8003318:	68a3      	ldr	r3, [r4, #8]
 800331a:	1b9b      	subs	r3, r3, r6
 800331c:	60a3      	str	r3, [r4, #8]
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	4433      	add	r3, r6
 8003322:	6023      	str	r3, [r4, #0]
 8003324:	2000      	movs	r0, #0
 8003326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332a:	462a      	mov	r2, r5
 800332c:	f000 fad4 	bl	80038d8 <_realloc_r>
 8003330:	4606      	mov	r6, r0
 8003332:	2800      	cmp	r0, #0
 8003334:	d1e0      	bne.n	80032f8 <__ssputs_r+0x5c>
 8003336:	6921      	ldr	r1, [r4, #16]
 8003338:	4650      	mov	r0, sl
 800333a:	f7ff feb7 	bl	80030ac <_free_r>
 800333e:	230c      	movs	r3, #12
 8003340:	f8ca 3000 	str.w	r3, [sl]
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	e7e9      	b.n	8003326 <__ssputs_r+0x8a>
	...

08003354 <_svfiprintf_r>:
 8003354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003358:	4698      	mov	r8, r3
 800335a:	898b      	ldrh	r3, [r1, #12]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	b09d      	sub	sp, #116	@ 0x74
 8003360:	4607      	mov	r7, r0
 8003362:	460d      	mov	r5, r1
 8003364:	4614      	mov	r4, r2
 8003366:	d510      	bpl.n	800338a <_svfiprintf_r+0x36>
 8003368:	690b      	ldr	r3, [r1, #16]
 800336a:	b973      	cbnz	r3, 800338a <_svfiprintf_r+0x36>
 800336c:	2140      	movs	r1, #64	@ 0x40
 800336e:	f7ff ff09 	bl	8003184 <_malloc_r>
 8003372:	6028      	str	r0, [r5, #0]
 8003374:	6128      	str	r0, [r5, #16]
 8003376:	b930      	cbnz	r0, 8003386 <_svfiprintf_r+0x32>
 8003378:	230c      	movs	r3, #12
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	b01d      	add	sp, #116	@ 0x74
 8003382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003386:	2340      	movs	r3, #64	@ 0x40
 8003388:	616b      	str	r3, [r5, #20]
 800338a:	2300      	movs	r3, #0
 800338c:	9309      	str	r3, [sp, #36]	@ 0x24
 800338e:	2320      	movs	r3, #32
 8003390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003394:	f8cd 800c 	str.w	r8, [sp, #12]
 8003398:	2330      	movs	r3, #48	@ 0x30
 800339a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003538 <_svfiprintf_r+0x1e4>
 800339e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033a2:	f04f 0901 	mov.w	r9, #1
 80033a6:	4623      	mov	r3, r4
 80033a8:	469a      	mov	sl, r3
 80033aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ae:	b10a      	cbz	r2, 80033b4 <_svfiprintf_r+0x60>
 80033b0:	2a25      	cmp	r2, #37	@ 0x25
 80033b2:	d1f9      	bne.n	80033a8 <_svfiprintf_r+0x54>
 80033b4:	ebba 0b04 	subs.w	fp, sl, r4
 80033b8:	d00b      	beq.n	80033d2 <_svfiprintf_r+0x7e>
 80033ba:	465b      	mov	r3, fp
 80033bc:	4622      	mov	r2, r4
 80033be:	4629      	mov	r1, r5
 80033c0:	4638      	mov	r0, r7
 80033c2:	f7ff ff6b 	bl	800329c <__ssputs_r>
 80033c6:	3001      	adds	r0, #1
 80033c8:	f000 80a7 	beq.w	800351a <_svfiprintf_r+0x1c6>
 80033cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033ce:	445a      	add	r2, fp
 80033d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80033d2:	f89a 3000 	ldrb.w	r3, [sl]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 809f 	beq.w	800351a <_svfiprintf_r+0x1c6>
 80033dc:	2300      	movs	r3, #0
 80033de:	f04f 32ff 	mov.w	r2, #4294967295
 80033e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e6:	f10a 0a01 	add.w	sl, sl, #1
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	9307      	str	r3, [sp, #28]
 80033ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80033f4:	4654      	mov	r4, sl
 80033f6:	2205      	movs	r2, #5
 80033f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033fc:	484e      	ldr	r0, [pc, #312]	@ (8003538 <_svfiprintf_r+0x1e4>)
 80033fe:	f7fc ff0f 	bl	8000220 <memchr>
 8003402:	9a04      	ldr	r2, [sp, #16]
 8003404:	b9d8      	cbnz	r0, 800343e <_svfiprintf_r+0xea>
 8003406:	06d0      	lsls	r0, r2, #27
 8003408:	bf44      	itt	mi
 800340a:	2320      	movmi	r3, #32
 800340c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003410:	0711      	lsls	r1, r2, #28
 8003412:	bf44      	itt	mi
 8003414:	232b      	movmi	r3, #43	@ 0x2b
 8003416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800341a:	f89a 3000 	ldrb.w	r3, [sl]
 800341e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003420:	d015      	beq.n	800344e <_svfiprintf_r+0xfa>
 8003422:	9a07      	ldr	r2, [sp, #28]
 8003424:	4654      	mov	r4, sl
 8003426:	2000      	movs	r0, #0
 8003428:	f04f 0c0a 	mov.w	ip, #10
 800342c:	4621      	mov	r1, r4
 800342e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003432:	3b30      	subs	r3, #48	@ 0x30
 8003434:	2b09      	cmp	r3, #9
 8003436:	d94b      	bls.n	80034d0 <_svfiprintf_r+0x17c>
 8003438:	b1b0      	cbz	r0, 8003468 <_svfiprintf_r+0x114>
 800343a:	9207      	str	r2, [sp, #28]
 800343c:	e014      	b.n	8003468 <_svfiprintf_r+0x114>
 800343e:	eba0 0308 	sub.w	r3, r0, r8
 8003442:	fa09 f303 	lsl.w	r3, r9, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	9304      	str	r3, [sp, #16]
 800344a:	46a2      	mov	sl, r4
 800344c:	e7d2      	b.n	80033f4 <_svfiprintf_r+0xa0>
 800344e:	9b03      	ldr	r3, [sp, #12]
 8003450:	1d19      	adds	r1, r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	9103      	str	r1, [sp, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfbb      	ittet	lt
 800345a:	425b      	neglt	r3, r3
 800345c:	f042 0202 	orrlt.w	r2, r2, #2
 8003460:	9307      	strge	r3, [sp, #28]
 8003462:	9307      	strlt	r3, [sp, #28]
 8003464:	bfb8      	it	lt
 8003466:	9204      	strlt	r2, [sp, #16]
 8003468:	7823      	ldrb	r3, [r4, #0]
 800346a:	2b2e      	cmp	r3, #46	@ 0x2e
 800346c:	d10a      	bne.n	8003484 <_svfiprintf_r+0x130>
 800346e:	7863      	ldrb	r3, [r4, #1]
 8003470:	2b2a      	cmp	r3, #42	@ 0x2a
 8003472:	d132      	bne.n	80034da <_svfiprintf_r+0x186>
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003480:	3402      	adds	r4, #2
 8003482:	9305      	str	r3, [sp, #20]
 8003484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003548 <_svfiprintf_r+0x1f4>
 8003488:	7821      	ldrb	r1, [r4, #0]
 800348a:	2203      	movs	r2, #3
 800348c:	4650      	mov	r0, sl
 800348e:	f7fc fec7 	bl	8000220 <memchr>
 8003492:	b138      	cbz	r0, 80034a4 <_svfiprintf_r+0x150>
 8003494:	9b04      	ldr	r3, [sp, #16]
 8003496:	eba0 000a 	sub.w	r0, r0, sl
 800349a:	2240      	movs	r2, #64	@ 0x40
 800349c:	4082      	lsls	r2, r0
 800349e:	4313      	orrs	r3, r2
 80034a0:	3401      	adds	r4, #1
 80034a2:	9304      	str	r3, [sp, #16]
 80034a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a8:	4824      	ldr	r0, [pc, #144]	@ (800353c <_svfiprintf_r+0x1e8>)
 80034aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034ae:	2206      	movs	r2, #6
 80034b0:	f7fc feb6 	bl	8000220 <memchr>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d036      	beq.n	8003526 <_svfiprintf_r+0x1d2>
 80034b8:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <_svfiprintf_r+0x1ec>)
 80034ba:	bb1b      	cbnz	r3, 8003504 <_svfiprintf_r+0x1b0>
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	3307      	adds	r3, #7
 80034c0:	f023 0307 	bic.w	r3, r3, #7
 80034c4:	3308      	adds	r3, #8
 80034c6:	9303      	str	r3, [sp, #12]
 80034c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ca:	4433      	add	r3, r6
 80034cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ce:	e76a      	b.n	80033a6 <_svfiprintf_r+0x52>
 80034d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d4:	460c      	mov	r4, r1
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7a8      	b.n	800342c <_svfiprintf_r+0xd8>
 80034da:	2300      	movs	r3, #0
 80034dc:	3401      	adds	r4, #1
 80034de:	9305      	str	r3, [sp, #20]
 80034e0:	4619      	mov	r1, r3
 80034e2:	f04f 0c0a 	mov.w	ip, #10
 80034e6:	4620      	mov	r0, r4
 80034e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ec:	3a30      	subs	r2, #48	@ 0x30
 80034ee:	2a09      	cmp	r2, #9
 80034f0:	d903      	bls.n	80034fa <_svfiprintf_r+0x1a6>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0c6      	beq.n	8003484 <_svfiprintf_r+0x130>
 80034f6:	9105      	str	r1, [sp, #20]
 80034f8:	e7c4      	b.n	8003484 <_svfiprintf_r+0x130>
 80034fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80034fe:	4604      	mov	r4, r0
 8003500:	2301      	movs	r3, #1
 8003502:	e7f0      	b.n	80034e6 <_svfiprintf_r+0x192>
 8003504:	ab03      	add	r3, sp, #12
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	462a      	mov	r2, r5
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <_svfiprintf_r+0x1f0>)
 800350c:	a904      	add	r1, sp, #16
 800350e:	4638      	mov	r0, r7
 8003510:	f3af 8000 	nop.w
 8003514:	1c42      	adds	r2, r0, #1
 8003516:	4606      	mov	r6, r0
 8003518:	d1d6      	bne.n	80034c8 <_svfiprintf_r+0x174>
 800351a:	89ab      	ldrh	r3, [r5, #12]
 800351c:	065b      	lsls	r3, r3, #25
 800351e:	f53f af2d 	bmi.w	800337c <_svfiprintf_r+0x28>
 8003522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003524:	e72c      	b.n	8003380 <_svfiprintf_r+0x2c>
 8003526:	ab03      	add	r3, sp, #12
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	462a      	mov	r2, r5
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <_svfiprintf_r+0x1f0>)
 800352e:	a904      	add	r1, sp, #16
 8003530:	4638      	mov	r0, r7
 8003532:	f000 f879 	bl	8003628 <_printf_i>
 8003536:	e7ed      	b.n	8003514 <_svfiprintf_r+0x1c0>
 8003538:	08003990 	.word	0x08003990
 800353c:	0800399a 	.word	0x0800399a
 8003540:	00000000 	.word	0x00000000
 8003544:	0800329d 	.word	0x0800329d
 8003548:	08003996 	.word	0x08003996

0800354c <_printf_common>:
 800354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	4616      	mov	r6, r2
 8003552:	4698      	mov	r8, r3
 8003554:	688a      	ldr	r2, [r1, #8]
 8003556:	690b      	ldr	r3, [r1, #16]
 8003558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800355c:	4293      	cmp	r3, r2
 800355e:	bfb8      	it	lt
 8003560:	4613      	movlt	r3, r2
 8003562:	6033      	str	r3, [r6, #0]
 8003564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003568:	4607      	mov	r7, r0
 800356a:	460c      	mov	r4, r1
 800356c:	b10a      	cbz	r2, 8003572 <_printf_common+0x26>
 800356e:	3301      	adds	r3, #1
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	0699      	lsls	r1, r3, #26
 8003576:	bf42      	ittt	mi
 8003578:	6833      	ldrmi	r3, [r6, #0]
 800357a:	3302      	addmi	r3, #2
 800357c:	6033      	strmi	r3, [r6, #0]
 800357e:	6825      	ldr	r5, [r4, #0]
 8003580:	f015 0506 	ands.w	r5, r5, #6
 8003584:	d106      	bne.n	8003594 <_printf_common+0x48>
 8003586:	f104 0a19 	add.w	sl, r4, #25
 800358a:	68e3      	ldr	r3, [r4, #12]
 800358c:	6832      	ldr	r2, [r6, #0]
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	42ab      	cmp	r3, r5
 8003592:	dc26      	bgt.n	80035e2 <_printf_common+0x96>
 8003594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	3b00      	subs	r3, #0
 800359c:	bf18      	it	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	0692      	lsls	r2, r2, #26
 80035a2:	d42b      	bmi.n	80035fc <_printf_common+0xb0>
 80035a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035a8:	4641      	mov	r1, r8
 80035aa:	4638      	mov	r0, r7
 80035ac:	47c8      	blx	r9
 80035ae:	3001      	adds	r0, #1
 80035b0:	d01e      	beq.n	80035f0 <_printf_common+0xa4>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	6922      	ldr	r2, [r4, #16]
 80035b6:	f003 0306 	and.w	r3, r3, #6
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf02      	ittt	eq
 80035be:	68e5      	ldreq	r5, [r4, #12]
 80035c0:	6833      	ldreq	r3, [r6, #0]
 80035c2:	1aed      	subeq	r5, r5, r3
 80035c4:	68a3      	ldr	r3, [r4, #8]
 80035c6:	bf0c      	ite	eq
 80035c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035cc:	2500      	movne	r5, #0
 80035ce:	4293      	cmp	r3, r2
 80035d0:	bfc4      	itt	gt
 80035d2:	1a9b      	subgt	r3, r3, r2
 80035d4:	18ed      	addgt	r5, r5, r3
 80035d6:	2600      	movs	r6, #0
 80035d8:	341a      	adds	r4, #26
 80035da:	42b5      	cmp	r5, r6
 80035dc:	d11a      	bne.n	8003614 <_printf_common+0xc8>
 80035de:	2000      	movs	r0, #0
 80035e0:	e008      	b.n	80035f4 <_printf_common+0xa8>
 80035e2:	2301      	movs	r3, #1
 80035e4:	4652      	mov	r2, sl
 80035e6:	4641      	mov	r1, r8
 80035e8:	4638      	mov	r0, r7
 80035ea:	47c8      	blx	r9
 80035ec:	3001      	adds	r0, #1
 80035ee:	d103      	bne.n	80035f8 <_printf_common+0xac>
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f8:	3501      	adds	r5, #1
 80035fa:	e7c6      	b.n	800358a <_printf_common+0x3e>
 80035fc:	18e1      	adds	r1, r4, r3
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	2030      	movs	r0, #48	@ 0x30
 8003602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003606:	4422      	add	r2, r4
 8003608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800360c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003610:	3302      	adds	r3, #2
 8003612:	e7c7      	b.n	80035a4 <_printf_common+0x58>
 8003614:	2301      	movs	r3, #1
 8003616:	4622      	mov	r2, r4
 8003618:	4641      	mov	r1, r8
 800361a:	4638      	mov	r0, r7
 800361c:	47c8      	blx	r9
 800361e:	3001      	adds	r0, #1
 8003620:	d0e6      	beq.n	80035f0 <_printf_common+0xa4>
 8003622:	3601      	adds	r6, #1
 8003624:	e7d9      	b.n	80035da <_printf_common+0x8e>
	...

08003628 <_printf_i>:
 8003628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	7e0f      	ldrb	r7, [r1, #24]
 800362e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003630:	2f78      	cmp	r7, #120	@ 0x78
 8003632:	4691      	mov	r9, r2
 8003634:	4680      	mov	r8, r0
 8003636:	460c      	mov	r4, r1
 8003638:	469a      	mov	sl, r3
 800363a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800363e:	d807      	bhi.n	8003650 <_printf_i+0x28>
 8003640:	2f62      	cmp	r7, #98	@ 0x62
 8003642:	d80a      	bhi.n	800365a <_printf_i+0x32>
 8003644:	2f00      	cmp	r7, #0
 8003646:	f000 80d2 	beq.w	80037ee <_printf_i+0x1c6>
 800364a:	2f58      	cmp	r7, #88	@ 0x58
 800364c:	f000 80b9 	beq.w	80037c2 <_printf_i+0x19a>
 8003650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003658:	e03a      	b.n	80036d0 <_printf_i+0xa8>
 800365a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800365e:	2b15      	cmp	r3, #21
 8003660:	d8f6      	bhi.n	8003650 <_printf_i+0x28>
 8003662:	a101      	add	r1, pc, #4	@ (adr r1, 8003668 <_printf_i+0x40>)
 8003664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003668:	080036c1 	.word	0x080036c1
 800366c:	080036d5 	.word	0x080036d5
 8003670:	08003651 	.word	0x08003651
 8003674:	08003651 	.word	0x08003651
 8003678:	08003651 	.word	0x08003651
 800367c:	08003651 	.word	0x08003651
 8003680:	080036d5 	.word	0x080036d5
 8003684:	08003651 	.word	0x08003651
 8003688:	08003651 	.word	0x08003651
 800368c:	08003651 	.word	0x08003651
 8003690:	08003651 	.word	0x08003651
 8003694:	080037d5 	.word	0x080037d5
 8003698:	080036ff 	.word	0x080036ff
 800369c:	0800378f 	.word	0x0800378f
 80036a0:	08003651 	.word	0x08003651
 80036a4:	08003651 	.word	0x08003651
 80036a8:	080037f7 	.word	0x080037f7
 80036ac:	08003651 	.word	0x08003651
 80036b0:	080036ff 	.word	0x080036ff
 80036b4:	08003651 	.word	0x08003651
 80036b8:	08003651 	.word	0x08003651
 80036bc:	08003797 	.word	0x08003797
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6032      	str	r2, [r6, #0]
 80036c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036d0:	2301      	movs	r3, #1
 80036d2:	e09d      	b.n	8003810 <_printf_i+0x1e8>
 80036d4:	6833      	ldr	r3, [r6, #0]
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	1d19      	adds	r1, r3, #4
 80036da:	6031      	str	r1, [r6, #0]
 80036dc:	0606      	lsls	r6, r0, #24
 80036de:	d501      	bpl.n	80036e4 <_printf_i+0xbc>
 80036e0:	681d      	ldr	r5, [r3, #0]
 80036e2:	e003      	b.n	80036ec <_printf_i+0xc4>
 80036e4:	0645      	lsls	r5, r0, #25
 80036e6:	d5fb      	bpl.n	80036e0 <_printf_i+0xb8>
 80036e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036ec:	2d00      	cmp	r5, #0
 80036ee:	da03      	bge.n	80036f8 <_printf_i+0xd0>
 80036f0:	232d      	movs	r3, #45	@ 0x2d
 80036f2:	426d      	negs	r5, r5
 80036f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f8:	4859      	ldr	r0, [pc, #356]	@ (8003860 <_printf_i+0x238>)
 80036fa:	230a      	movs	r3, #10
 80036fc:	e011      	b.n	8003722 <_printf_i+0xfa>
 80036fe:	6821      	ldr	r1, [r4, #0]
 8003700:	6833      	ldr	r3, [r6, #0]
 8003702:	0608      	lsls	r0, r1, #24
 8003704:	f853 5b04 	ldr.w	r5, [r3], #4
 8003708:	d402      	bmi.n	8003710 <_printf_i+0xe8>
 800370a:	0649      	lsls	r1, r1, #25
 800370c:	bf48      	it	mi
 800370e:	b2ad      	uxthmi	r5, r5
 8003710:	2f6f      	cmp	r7, #111	@ 0x6f
 8003712:	4853      	ldr	r0, [pc, #332]	@ (8003860 <_printf_i+0x238>)
 8003714:	6033      	str	r3, [r6, #0]
 8003716:	bf14      	ite	ne
 8003718:	230a      	movne	r3, #10
 800371a:	2308      	moveq	r3, #8
 800371c:	2100      	movs	r1, #0
 800371e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003722:	6866      	ldr	r6, [r4, #4]
 8003724:	60a6      	str	r6, [r4, #8]
 8003726:	2e00      	cmp	r6, #0
 8003728:	bfa2      	ittt	ge
 800372a:	6821      	ldrge	r1, [r4, #0]
 800372c:	f021 0104 	bicge.w	r1, r1, #4
 8003730:	6021      	strge	r1, [r4, #0]
 8003732:	b90d      	cbnz	r5, 8003738 <_printf_i+0x110>
 8003734:	2e00      	cmp	r6, #0
 8003736:	d04b      	beq.n	80037d0 <_printf_i+0x1a8>
 8003738:	4616      	mov	r6, r2
 800373a:	fbb5 f1f3 	udiv	r1, r5, r3
 800373e:	fb03 5711 	mls	r7, r3, r1, r5
 8003742:	5dc7      	ldrb	r7, [r0, r7]
 8003744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003748:	462f      	mov	r7, r5
 800374a:	42bb      	cmp	r3, r7
 800374c:	460d      	mov	r5, r1
 800374e:	d9f4      	bls.n	800373a <_printf_i+0x112>
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10b      	bne.n	800376c <_printf_i+0x144>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	07df      	lsls	r7, r3, #31
 8003758:	d508      	bpl.n	800376c <_printf_i+0x144>
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	6861      	ldr	r1, [r4, #4]
 800375e:	4299      	cmp	r1, r3
 8003760:	bfde      	ittt	le
 8003762:	2330      	movle	r3, #48	@ 0x30
 8003764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800376c:	1b92      	subs	r2, r2, r6
 800376e:	6122      	str	r2, [r4, #16]
 8003770:	f8cd a000 	str.w	sl, [sp]
 8003774:	464b      	mov	r3, r9
 8003776:	aa03      	add	r2, sp, #12
 8003778:	4621      	mov	r1, r4
 800377a:	4640      	mov	r0, r8
 800377c:	f7ff fee6 	bl	800354c <_printf_common>
 8003780:	3001      	adds	r0, #1
 8003782:	d14a      	bne.n	800381a <_printf_i+0x1f2>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	b004      	add	sp, #16
 800378a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f043 0320 	orr.w	r3, r3, #32
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	4833      	ldr	r0, [pc, #204]	@ (8003864 <_printf_i+0x23c>)
 8003798:	2778      	movs	r7, #120	@ 0x78
 800379a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	6831      	ldr	r1, [r6, #0]
 80037a2:	061f      	lsls	r7, r3, #24
 80037a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80037a8:	d402      	bmi.n	80037b0 <_printf_i+0x188>
 80037aa:	065f      	lsls	r7, r3, #25
 80037ac:	bf48      	it	mi
 80037ae:	b2ad      	uxthmi	r5, r5
 80037b0:	6031      	str	r1, [r6, #0]
 80037b2:	07d9      	lsls	r1, r3, #31
 80037b4:	bf44      	itt	mi
 80037b6:	f043 0320 	orrmi.w	r3, r3, #32
 80037ba:	6023      	strmi	r3, [r4, #0]
 80037bc:	b11d      	cbz	r5, 80037c6 <_printf_i+0x19e>
 80037be:	2310      	movs	r3, #16
 80037c0:	e7ac      	b.n	800371c <_printf_i+0xf4>
 80037c2:	4827      	ldr	r0, [pc, #156]	@ (8003860 <_printf_i+0x238>)
 80037c4:	e7e9      	b.n	800379a <_printf_i+0x172>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	f023 0320 	bic.w	r3, r3, #32
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	e7f6      	b.n	80037be <_printf_i+0x196>
 80037d0:	4616      	mov	r6, r2
 80037d2:	e7bd      	b.n	8003750 <_printf_i+0x128>
 80037d4:	6833      	ldr	r3, [r6, #0]
 80037d6:	6825      	ldr	r5, [r4, #0]
 80037d8:	6961      	ldr	r1, [r4, #20]
 80037da:	1d18      	adds	r0, r3, #4
 80037dc:	6030      	str	r0, [r6, #0]
 80037de:	062e      	lsls	r6, r5, #24
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	d501      	bpl.n	80037e8 <_printf_i+0x1c0>
 80037e4:	6019      	str	r1, [r3, #0]
 80037e6:	e002      	b.n	80037ee <_printf_i+0x1c6>
 80037e8:	0668      	lsls	r0, r5, #25
 80037ea:	d5fb      	bpl.n	80037e4 <_printf_i+0x1bc>
 80037ec:	8019      	strh	r1, [r3, #0]
 80037ee:	2300      	movs	r3, #0
 80037f0:	6123      	str	r3, [r4, #16]
 80037f2:	4616      	mov	r6, r2
 80037f4:	e7bc      	b.n	8003770 <_printf_i+0x148>
 80037f6:	6833      	ldr	r3, [r6, #0]
 80037f8:	1d1a      	adds	r2, r3, #4
 80037fa:	6032      	str	r2, [r6, #0]
 80037fc:	681e      	ldr	r6, [r3, #0]
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	2100      	movs	r1, #0
 8003802:	4630      	mov	r0, r6
 8003804:	f7fc fd0c 	bl	8000220 <memchr>
 8003808:	b108      	cbz	r0, 800380e <_printf_i+0x1e6>
 800380a:	1b80      	subs	r0, r0, r6
 800380c:	6060      	str	r0, [r4, #4]
 800380e:	6863      	ldr	r3, [r4, #4]
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	2300      	movs	r3, #0
 8003814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003818:	e7aa      	b.n	8003770 <_printf_i+0x148>
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	4632      	mov	r2, r6
 800381e:	4649      	mov	r1, r9
 8003820:	4640      	mov	r0, r8
 8003822:	47d0      	blx	sl
 8003824:	3001      	adds	r0, #1
 8003826:	d0ad      	beq.n	8003784 <_printf_i+0x15c>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	079b      	lsls	r3, r3, #30
 800382c:	d413      	bmi.n	8003856 <_printf_i+0x22e>
 800382e:	68e0      	ldr	r0, [r4, #12]
 8003830:	9b03      	ldr	r3, [sp, #12]
 8003832:	4298      	cmp	r0, r3
 8003834:	bfb8      	it	lt
 8003836:	4618      	movlt	r0, r3
 8003838:	e7a6      	b.n	8003788 <_printf_i+0x160>
 800383a:	2301      	movs	r3, #1
 800383c:	4632      	mov	r2, r6
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	47d0      	blx	sl
 8003844:	3001      	adds	r0, #1
 8003846:	d09d      	beq.n	8003784 <_printf_i+0x15c>
 8003848:	3501      	adds	r5, #1
 800384a:	68e3      	ldr	r3, [r4, #12]
 800384c:	9903      	ldr	r1, [sp, #12]
 800384e:	1a5b      	subs	r3, r3, r1
 8003850:	42ab      	cmp	r3, r5
 8003852:	dcf2      	bgt.n	800383a <_printf_i+0x212>
 8003854:	e7eb      	b.n	800382e <_printf_i+0x206>
 8003856:	2500      	movs	r5, #0
 8003858:	f104 0619 	add.w	r6, r4, #25
 800385c:	e7f5      	b.n	800384a <_printf_i+0x222>
 800385e:	bf00      	nop
 8003860:	080039a1 	.word	0x080039a1
 8003864:	080039b2 	.word	0x080039b2

08003868 <memmove>:
 8003868:	4288      	cmp	r0, r1
 800386a:	b510      	push	{r4, lr}
 800386c:	eb01 0402 	add.w	r4, r1, r2
 8003870:	d902      	bls.n	8003878 <memmove+0x10>
 8003872:	4284      	cmp	r4, r0
 8003874:	4623      	mov	r3, r4
 8003876:	d807      	bhi.n	8003888 <memmove+0x20>
 8003878:	1e43      	subs	r3, r0, #1
 800387a:	42a1      	cmp	r1, r4
 800387c:	d008      	beq.n	8003890 <memmove+0x28>
 800387e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003886:	e7f8      	b.n	800387a <memmove+0x12>
 8003888:	4402      	add	r2, r0
 800388a:	4601      	mov	r1, r0
 800388c:	428a      	cmp	r2, r1
 800388e:	d100      	bne.n	8003892 <memmove+0x2a>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800389a:	e7f7      	b.n	800388c <memmove+0x24>

0800389c <_sbrk_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d06      	ldr	r5, [pc, #24]	@ (80038b8 <_sbrk_r+0x1c>)
 80038a0:	2300      	movs	r3, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	602b      	str	r3, [r5, #0]
 80038a8:	f7fd f924 	bl	8000af4 <_sbrk>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_sbrk_r+0x1a>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_sbrk_r+0x1a>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000268 	.word	0x20000268

080038bc <memcpy>:
 80038bc:	440a      	add	r2, r1
 80038be:	4291      	cmp	r1, r2
 80038c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80038c4:	d100      	bne.n	80038c8 <memcpy+0xc>
 80038c6:	4770      	bx	lr
 80038c8:	b510      	push	{r4, lr}
 80038ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038d2:	4291      	cmp	r1, r2
 80038d4:	d1f9      	bne.n	80038ca <memcpy+0xe>
 80038d6:	bd10      	pop	{r4, pc}

080038d8 <_realloc_r>:
 80038d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038dc:	4680      	mov	r8, r0
 80038de:	4615      	mov	r5, r2
 80038e0:	460c      	mov	r4, r1
 80038e2:	b921      	cbnz	r1, 80038ee <_realloc_r+0x16>
 80038e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038e8:	4611      	mov	r1, r2
 80038ea:	f7ff bc4b 	b.w	8003184 <_malloc_r>
 80038ee:	b92a      	cbnz	r2, 80038fc <_realloc_r+0x24>
 80038f0:	f7ff fbdc 	bl	80030ac <_free_r>
 80038f4:	2400      	movs	r4, #0
 80038f6:	4620      	mov	r0, r4
 80038f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038fc:	f000 f81a 	bl	8003934 <_malloc_usable_size_r>
 8003900:	4285      	cmp	r5, r0
 8003902:	4606      	mov	r6, r0
 8003904:	d802      	bhi.n	800390c <_realloc_r+0x34>
 8003906:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800390a:	d8f4      	bhi.n	80038f6 <_realloc_r+0x1e>
 800390c:	4629      	mov	r1, r5
 800390e:	4640      	mov	r0, r8
 8003910:	f7ff fc38 	bl	8003184 <_malloc_r>
 8003914:	4607      	mov	r7, r0
 8003916:	2800      	cmp	r0, #0
 8003918:	d0ec      	beq.n	80038f4 <_realloc_r+0x1c>
 800391a:	42b5      	cmp	r5, r6
 800391c:	462a      	mov	r2, r5
 800391e:	4621      	mov	r1, r4
 8003920:	bf28      	it	cs
 8003922:	4632      	movcs	r2, r6
 8003924:	f7ff ffca 	bl	80038bc <memcpy>
 8003928:	4621      	mov	r1, r4
 800392a:	4640      	mov	r0, r8
 800392c:	f7ff fbbe 	bl	80030ac <_free_r>
 8003930:	463c      	mov	r4, r7
 8003932:	e7e0      	b.n	80038f6 <_realloc_r+0x1e>

08003934 <_malloc_usable_size_r>:
 8003934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003938:	1f18      	subs	r0, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfbc      	itt	lt
 800393e:	580b      	ldrlt	r3, [r1, r0]
 8003940:	18c0      	addlt	r0, r0, r3
 8003942:	4770      	bx	lr

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
